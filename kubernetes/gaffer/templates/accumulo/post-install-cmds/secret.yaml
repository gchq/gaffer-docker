{{- define "gaffer.accumuloCommandsScript" -}}
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $DIR

USERNAME=$(cat ${ACCUMULO_CONF_DIR}/client.conf | grep "auth.principal" | grep -v "^#" | cut -d= -f2)
PASSWORD=$(cat ${ACCUMULO_CONF_DIR}/client.conf | grep "auth.token" | grep -v "^#" | cut -d= -f2)
[[ -z "${USERNAME}" || -z "${PASSWORD}" ]] && echo "Unable to locate Accumulo username and password in ${ACCUMULO_CONF_DIR}/client.conf" && exit 1

accumulo shell -fv ./commands.txt -u ${USERNAME} -p ${PASSWORD}
{{- end -}}

{{- define "gaffer.accumuloCommandsFile" -}}
script -e js -f ./accumulo-user-management.js

  {{- range $cmd := .Values.accumulo.config.postInstallCommands }}
    {{- print $cmd | nindent 0 }}
  {{- end }}
    {{- print "exit" | nindent 0 }}
{{- end -}}

{{- define "gaffer.accumuloUserManagementScript" -}}
var allSystemPermissions = org.apache.accumulo.core.security.SystemPermission.values();
var allTablePermissions = org.apache.accumulo.core.security.TablePermission.values();

function processUser (username, password, auths, systemPermissions, tablePermissions) {
  var passwordToken = new org.apache.accumulo.core.client.security.tokens.PasswordToken(password);

  var userExists = connection.securityOperations().listLocalUsers().contains(username);
  if (!userExists) {
    print('Creating user: ' + username)
    connection.securityOperations().createLocalUser(username, passwordToken);
  } else {
    print('Setting password for: ' + username)
    connection.securityOperations().changeLocalUserPassword(username, passwordToken);
  }

  if (auths == "") {
    print('Clearing authorizations for: ' + username)
    connection.securityOperations().changeUserAuthorizations(username, org.apache.accumulo.core.security.Authorizations.EMPTY);
  } else {
    var authStringList = auths.split(",");
    var authByteBufferList = new java.util.ArrayList();
    for (var i = 0; i < authStringList.length; i++) {
      var auth = authStringList[i];
      authByteBufferList.add(java.nio.ByteBuffer.wrap(auth.getBytes()));
    }
    print('Setting authorizations for: ' + username + ' to: ' + auths)
    connection.securityOperations().changeUserAuthorizations(username, new org.apache.accumulo.core.security.Authorizations(authByteBufferList));
  }

  if (systemPermissions != '') {
    var sysPermissionList = systemPermissions.split(',');
    for (var i = 0; i < sysPermissionList.length; i++) {
      var permission = sysPermissionList[i];
      var permissionEnum = org.apache.accumulo.core.security.SystemPermission.valueOf(permission);
      if (!connection.securityOperations().hasSystemPermission(username, permissionEnum)) {
        print('Granting System.' + permission + ' to: ' + username)
        connection.securityOperations().grantSystemPermission(username, permissionEnum);
      }
    }
  }

  for (var tableName in tablePermissions) {
    if (connection.tableOperations().exists(tableName) && tablePermissions[tableName] != '') {
      var tblPermissionList = tablePermissions[tableName].split(',');
      for (var i = 0; i < tblPermissionList.length; i++) {
        var permission = tblPermissionList[i];
        var permissionEnum = org.apache.accumulo.core.security.TablePermission.valueOf(permission);
        if (!connection.securityOperations().hasTablePermission(username, tableName, permissionEnum)) {
          print('Granting Table.' + permission + ' on: ' + tableName + ' to: ' + username)
          connection.securityOperations().grantTablePermission(username, tableName, permissionEnum);
        }
      }
    }
  }
}

{{- range $username := (keys .Values.accumulo.config.users | sortAlpha) }}
  {{- $userInfo := index $.Values.accumulo.config.users $username }}
processUser(
  {{- $username | quote }},
  {{- required (print "Password required for Accumulo User: " $username ". Please set: accumulo.config.users." $username ".password") $userInfo.password | quote }},
  {{- $userInfo.auths | join "," | quote }},
  {{- if not $userInfo.permissions -}}
    "",{}
  {{- else }}
    {{- $userInfo.permissions.system | join "," | quote }},{
    {{- if $userInfo.permissions.table }}
      {{- range $table, $permissions := $userInfo.permissions.table }}
        {{- $table | quote }}: {{ $permissions | join "," | quote }},
      {{- end }}
    {{- end -}}
    }
  {{- end -}}
);
{{- end }}

// dropLocalUser(user)
// revokeSystemPerission(user, SystemPermission)
// revokeTablePermission
{{- end -}}

{{- if or .Values.accumulo.config.users .Values.accumulo.config.postInstallCommands }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "gaffer.fullname" . }}-accumulo-cmds
  labels:
    {{- include "gaffer.labels" . | nindent 4 }}
type: Opaque
data:
  run.sh: {{ include "gaffer.accumuloCommandsScript" . | b64enc }}
  accumulo-user-management.js: {{ include "gaffer.accumuloUserManagementScript" . | b64enc }}
  commands.txt: {{ include "gaffer.accumuloCommandsFile" . | b64enc }}
{{- end }}
