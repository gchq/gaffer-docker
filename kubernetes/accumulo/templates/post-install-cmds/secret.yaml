{{- /*

Copyright 2020 Crown Copyright

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

*/ -}}
{{- define "accumulo.accumuloCommandsScript" -}}
#!/bin/bash -e

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $DIR

USERNAME=$(cat ${ACCUMULO_CONF_DIR}/client.conf | grep "auth.principal" | grep -v "^#" | cut -d= -f2)
PASSWORD=$(cat ${ACCUMULO_CONF_DIR}/client.conf | grep "auth.token" | grep -v "^#" | cut -d= -f2)
[[ -z "${USERNAME}" || -z "${PASSWORD}" ]] && echo "Unable to locate Accumulo username and password in ${ACCUMULO_CONF_DIR}/client.conf" && exit 1

until accumulo shell -u ${USERNAME} -p ${PASSWORD} -e info || [ $(( ATTEMPTS++ )) -gt 60 ]; do
  echo "$(date) - Waiting for Accumulo instance to be ready..."
  sleep 5
done

accumulo shell -fv ./commands.txt -u ${USERNAME} -p ${PASSWORD}
{{- end -}}

{{- define "accumulo.accumuloCommandsFile" -}}
script -e js -f ./accumulo-user-management.js

  {{- range $cmd := .Values.config.postInstallCommands }}
    {{- print $cmd | nindent 0 }}
  {{- end }}
    {{- print "exit" | nindent 0 }}
{{- end -}}

{{- define "accumulo.accumuloUserManagementScript" -}}
var allSystemPermissions = org.apache.accumulo.core.security.SystemPermission.values();
var allTablePermissions = org.apache.accumulo.core.security.TablePermission.values();
var revokeEnabled = {{ .Values.config.userManagement.revoke.enabled | quote | lower }};

function processUser (username, password, auths, systemPermissions, tablePermissions) {
  var passwordToken = new org.apache.accumulo.core.client.security.tokens.PasswordToken(password);

  var userExists = connection.securityOperations().listLocalUsers().contains(username);
  if (!userExists) {
    print('Creating user: ' + username)
    connection.securityOperations().createLocalUser(username, passwordToken);
  } else {
    print('Setting password for: ' + username)
    connection.securityOperations().changeLocalUserPassword(username, passwordToken);
  }

  if (auths == "") {
    print('Clearing authorizations for: ' + username)
    connection.securityOperations().changeUserAuthorizations(username, org.apache.accumulo.core.security.Authorizations.EMPTY);
  } else {
    var authStringList = auths.split(",");
    var authByteBufferList = new java.util.ArrayList();
    for (var i = 0; i < authStringList.length; i++) {
      var auth = authStringList[i];
      authByteBufferList.add(java.nio.ByteBuffer.wrap(auth.getBytes()));
    }
    print('Setting authorizations for: ' + username + ' to: ' + auths)
    connection.securityOperations().changeUserAuthorizations(username, new org.apache.accumulo.core.security.Authorizations(authByteBufferList));
  }

  var sysPermissionList = systemPermissions.split(',');
  for (var i = 0; i < allSystemPermissions.length; i++) {
    var permission = allSystemPermissions[i];
    if (connection.securityOperations().hasSystemPermission(username, permission)) {
      if (revokeEnabled == 'true' && sysPermissionList.indexOf(permission.toString()) == -1) {
        print('Revoking System.' + permission + ' from: ' + username)
        connection.securityOperations().revokeSystemPermission(username, permission);
      }
    } else {
      if (sysPermissionList.indexOf(permission.toString()) != -1) {
        print('Granting System.' + permission + ' to: ' + username)
        connection.securityOperations().grantSystemPermission(username, permission);
      }
    }
  }

  for (var tableName in tablePermissions) {
    if (connection.tableOperations().exists(tableName)) {
      var tblPermissionList = tablePermissions[tableName].split(',');
      for (var i = 0; i < allTablePermissions.length; i++) {
        var permission = allTablePermissions[i];
        if (connection.securityOperations().hasTablePermission(username, tableName, permission)) {
          if (revokeEnabled == 'true' && tblPermissionList.indexOf(permission.toString()) == -1) {
            print('Revoking Table.' + permission + ' on: ' + tableName + ' from: ' + username)
            connection.securityOperations().revokeTablePermission(username, tableName, permission);
          }
        } else {
          if (tblPermissionList.indexOf(permission.toString()) != -1) {
            print('Granting Table.' + permission + ' on: ' + tableName + ' to: ' + username)
            connection.securityOperations().grantTablePermission(username, tableName, permission);
          }
        }
      }
    }
  }
}

{{- range $username := (keys .Values.config.userManagement.users | sortAlpha) }}
  {{- $userInfo := index $.Values.config.userManagement.users $username }}
processUser(
  {{- $username | quote }},
  {{- required (print "Password required for Accumulo User: " $username ". Please set: accumulo.config.userManagement.users." $username ".password") $userInfo.password | quote }},
  {{- $userInfo.auths | join "," | quote }},
  {{- if not $userInfo.permissions -}}
    "",{}
  {{- else }}
    {{- $userInfo.permissions.system | join "," | quote }},{
    {{- if $userInfo.permissions.table }}
      {{- range $table, $permissions := $userInfo.permissions.table }}
        {{- $table | quote }}: {{ $permissions | join "," | quote }},
      {{- end }}
    {{- end -}}
    }
  {{- end -}}
);
{{- end }}

if (revokeEnabled == 'true') {
  var desiredUsers = {{ keys .Values.config.userManagement.users | sortAlpha | join "," | quote }}.split(",");
  var dbUsers = connection.securityOperations().listLocalUsers().toArray();
  for (var i = 0; i < dbUsers.length; i++) {
    var dbUser = dbUsers[i];
    if (dbUser != 'root' && desiredUsers.indexOf(dbUser) == -1) {
      print('Deleting user: ' + dbUser);
      connection.securityOperations().dropLocalUser(dbUser);
    }
  }
}

{{- end -}}

{{- if or .Values.config.userManagement.users .Values.config.postInstallCommands }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "accumulo.fullname" . }}-cmds
  labels:
    {{- include "accumulo.labels" . | nindent 4 }}
type: Opaque
data:
  run.sh: {{ include "accumulo.accumuloCommandsScript" . | b64enc }}
  accumulo-user-management.js: {{ include "accumulo.accumuloUserManagementScript" . | b64enc }}
  commands.txt: {{ include "accumulo.accumuloCommandsFile" . | b64enc }}
{{- end }}
